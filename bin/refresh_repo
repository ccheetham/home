#!/usr/bin/env python

import json
import os
import subprocess

class Flavor(object):
  def get_target(self, url):
    return os.path.basename(url)
  def checkout(self, url, rev, tgt):
    pass
  def update(self, url, rev, tgt):
    pass

class GitFlavor(Flavor):
  def get_target(self, target):
    target = Flavor.get_target(self, target)
    name, ext = os.path.splitext(target)
    return name if ext == '.git' else target
  def checkout(self, url, rev, tgt):
    subprocess.Popen(['git', 'clone', url, tgt]).wait()
  def update(self, tgt):
    subprocess.Popen(['git', 'pull'], cwd=tgt).wait()

class MercurialFlavor(Flavor):
  def checkout(self, url, rev, tgt):
    args = ['hg', 'clone']
    if rev:
      args += ['-r', rev]
    args += [url, tgt]
    subprocess.Popen(args).wait()
  def update(self, tgt):
    args = ['hg', 'update']
    subprocess.Popen(args, cwd=tgt).wait()

class SCMClient(object):
  flavors = {
      'git':GitFlavor(),
      'mercurial':MercurialFlavor(),
      }
  repo_dir = os.environ['ME_REPO_DIR']
  def __init__(self, typ):
    self.flavor = SCMClient.flavors[typ]
  def refresh(self, url, rev, target):
    if target is None:
      target = self.flavor.get_target(url)
    target_dir = os.path.join(SCMClient.repo_dir, target)
    if os.path.exists(target_dir):
      print "=== updating", target
      self.flavor.update(target_dir)
    else:
      print "=== checking out", target
      self.flavor.checkout(url, rev, target_dir)

if __name__ == '__main__':
  repo_config = os.path.join(os.environ['ME'], 'etc', 'repos')
  f = open(repo_config)
  o = json.load(f)
  for repo in o['repos']:
    client = SCMClient(repo['type'])
    client.refresh(repo['url'], repo.get('rev', None), repo.get('target', None))

