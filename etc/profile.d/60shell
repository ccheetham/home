# =============================================================================
# shell tooling
# =============================================================================

alias h='history -d'

alias PP=pushd
alias pp=popd

alias -g pd=~/etc/profile.d

unset ls_opts
ls_cmd=ls
case $ME_OS in
  bsd | osx )
    ls_opts=' -FGH'
    ;;
  *)
    for opt in classify color group-directories-first ; do
      if $ls_cmd --$opt > /dev/null 2>&1 ; then
        ls_opts+=" --$opt"
      fi
    done
    ;;
esac
alias ls="$ls_cmd$ls_opts"
unset ls_cmd ls_opts

alias ll='ls -lh'
alias l1='ls -1'
alias lF='ls *(.)'
alias lD='ls -d *(/)'
alias la='ls -A'
if ls -@ > /dev/null 2>&1 ; then
  alias l@='ll -@'
fi

alias mkdir='mkdir -p'
alias md='mkdir'
function rd() {
  if [[ $1 == -f ]] || [[ $1 == --force ]]; then
    shift
    rm -rf $@
  else
    rmdir $@
  fi
}

alias cls='clear'

unalias which > /dev/null 2<&1

function scratch() {
  local do_init=false
  while getopts ":hi" opt ; do
    case $opt in
      h)
        cat <<EOF
USAGE
    $0 [-ih]
WHERE
    -i    init a fresh scratch area
    -h    print this message
EOF
        return
        ;;
      i)
        do_init=true
        ;;
      \?)
        echo "invalid option -$OPTARG" 2>&1
        echo "run with -h for help" 2>&1
        return 1
        ;;
      :)
        echo "option -$OPTARG requires an argument" 2>&1
        echo "run with -h for help" 2>&1
        return 1
        ;;
    esac
  done
  local args=*1

  local scratch_dir=${SCRATCH:-$HOME/scratch}
  test -d $scratch dir || mkdir -p $scratch_dir || return 1
  cd $scratch_dir
  # ensure cd worked
  [[ $(pwd) == $scratch_dir ]] || return 1
  # ensure dir writeable
  touch .scratched || return 1
  $do_init || return 0
  files=(*(N) .[A-z]*(N))
  [ -n "$files" ] && rm -rf $files
  git init
  echo ".scratched" > .gitignore
}

function topcommands() {
  history 0 | awk '{a[$2]++}END{for(i in a){print a[i] " " i}}' | sort -rn | head -10
}

function liberate() {
  if [[ $ME_OS != osx ]]; then
    err "OS not supported: $ME_OS"
    return 1
  fi
  if [[ $# -eq 0 ]]; then
    err "files not specified"
    return 1
  fi
  xattr -d com.apple.quarantine $@
}

# vim: ft=zsh
