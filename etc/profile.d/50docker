# =============================================================================
# Docker
# -----------------------------------------------------------------------------
# https://www.docker.com/
# =============================================================================

export DOCKER_ID_USER=ccheetham
export DOCKER_CONFIG=~/.docker/$ME_HOST

alias d='docker'
alias d\?='d help'
alias dc='d compose'
alias dprune='d system prune -f'

# -----------------------------------------------------------------------------
# dman: convenience for 'man docker-CMD'
# -----------------------------------------------------------------------------
dman () {
  if [[ $# != 1 ]] ; then
    echo "specify one and only one docker command" >&2
    return 1
  fi
  man docker-$1
}

# -----------------------------------------------------------------------------
# drun: run image interactively
# -----------------------------------------------------------------------------
drun () {
  local image
  if [[ $# == 0 ]] ; then
    image=$(basename $(pwd))
  else
    image=$1
    shift
  fi
  cmd="docker run -it --rm $image $*"
  echo "\$ "$cmd
  eval $cmd
}

# -----------------------------------------------------------------------------
# dweb: run image with poer forward 8080->80
# -----------------------------------------------------------------------------
dweb () {
  if [[ $# == 0 ]] ; then
    echo "docker image not specified" >&2
    return 1
  fi
  drun -p8080:80 $*
}

# -----------------------------------------------------------------------------
# dbash: run image interactively via bash
# -----------------------------------------------------------------------------
dbash () {
  if [[ $# == 0 ]] ; then
    echo "specify one and only one docker image" >&2
    return 1
  fi
  drun $image $1 bash
}

# -----------------------------------------------------------------------------
# drmx: remove exited containers
# -----------------------------------------------------------------------------
drmx () {
  docker ps --all --quiet --filter status=exited | xargs docker rm
}

# -----------------------------------------------------------------------------
# drmio: remove orphaned images
# -----------------------------------------------------------------------------
drmio () {
  docker images | grep '^<none>' | awk '{print $3}' | xargs docker rmi
}


# -----------------------------------------------------------------------------
# drmix: remove all images
# -----------------------------------------------------------------------------
drmia () {
  docker images --all --quiet | xargs docker rmi
}

# -----------------------------------------------------------------------------
# dtags: list image tags
# -----------------------------------------------------------------------------
dtags () {
  local image
  local tags
  if [[ $# != 1 ]] ; then
    echo "specify one and only one docker image" >&2
    return 1
  fi
  image=$1
  tags=$(wget -q -O- https://registry.hub.docker.com/v2/repositories/library/$image/tags)
  if [[ $? != 0 ]] ; then
    echo "no tags for $image" >&2
      return 1
  fi
  python - <<EOF
import json
tags = [t['name'] for t in json.loads('''$tags''')['results']]
tags.sort()
for tag in tags:
    print "{}:{}".format('$image', tag)
EOF
}

# -----------------------------------------------------------------------------
# dbuild: build image
# -----------------------------------------------------------------------------
dbuild () {
  local tag
  case $# in
    0)
      tag=$(basename $(pwd))
      ;;
    1)
      tag=$1
      ;;
    *)
      echo "specify at most one tag" >&2
      return 1
  esac
  docker build -t $tag .
  echo "tagged as $tag"
}

# -----------------------------------------------------------------------------
# dsh: run an image with a shell for the entrypoint
# -----------------------------------------------------------------------------

dsh () {
  local shell=bash
  while getopts ":s:h" opt ; do
    case $opt in
      h)
        cat <<EOF
USAGE
    $0 [-h] [-s SHELL] IMAGE
WHERE
    -s    specify entrypoint shell (default: $shell)
    -h    print this message
EOF
        return
        ;;
      s)
        shell=$OPTARG
        ;;
      \?)
        echo "invalid option -$OPTARG" 2>&1
        echo "run with -h for help" 2>&1
        return 1
        ;;
      :)
        echo "option -$OPTARG requires an argument" 2>&1
        echo "run with -h for help" 2>&1
        return 1
        ;;
    esac
  done
  shift $(($OPTIND-1))
  if [[ $# == 0 ]]; then
    err "image not specified; run with -h for help"
    return 1
  fi
  local image=$1
  shift
  if [[ $# > 0 ]]; then
    err "too many args; run with -h for help"
    return 1
  fi
  drun --entrypoint $shell $image
}

# vim: ft=zsh
