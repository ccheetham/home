# =============================================================================
# system administration
# =============================================================================

alias ho='hostname -f'
alias hosts='sudo $EDITOR /etc/hosts'
[[ $ME_OS == osx ]] && alias dmesg='sudo dmesg'

#sys() {
#    local cmd
#    local host
#    [[ $# > 0 ]] && cmd=$1 && shift
#    [[ $# > 0 ]] && host=$1 && shift
#    if [[ -z $cmd ]] || [[ $# > 0 ]] ; then
#        echo 'usage: sys <command> [host]'
#        return 1
#    fi
#    if [[ -n $host ]] ; then
#        ssh root@$host $cmd
#    else
#        sudo $cmd
#    fi
#}

toor() {
    local display=
    [[ -n DISPLAY ]] && display=$DISPLAY
    unset DISPLAY
    sudo su -
    [[ -n display ]] && export DISPLAY=$display
}

joe() {
    sudo su - joe
}

reboot() {
    sudo /sbin/reboot
}

poweroff() {
    local poweroff=/sbin/poweroff
    [[ $ME_OS == solaris ]] && poweroff=/usr/sbin/poweroff
    sudo $poweroff
}

systail () {
    for syslog in /var/log/syslog /var/log/messages /var/log/system.log
    do
        if [[ -f $syslog ]]
        then
            tail -f $syslog
            return
        fi
    done
    echo "do not know how to tail system log on this plaform/host" >&2
    return 1
}

# -----------------------------------------------------------------------------
# service management
# -----------------------------------------------------------------------------

if [[ $ME_OS == osx ]] ; then
    alias melaunch="launchctl list|grep '\sme\.'"
fi

if [[ $ME_OS == linux ]] ; then
    alias chkconfig='sudo chkconfig'
fi

if [[ $ME_OS == solaris ]] ; then
    alias svcadm='sudo svcadm'
fi

# -----------------------------------------------------------------------------
# storage management
# -----------------------------------------------------------------------------

space () {
    echo "Mount (Volume)            Size   Used  Avail   Pct   Filesystem"
    echo "-----------------------  -----  -----  -----  ----   ----------------"
    format="%-23s  %5s  %5s  %5s  %4s   %s"
    if [[ $ME_OS == osx ]] ; then
        for fs in /Volumes/* ; do
            df -Hl $fs | tail -1 | \
                awk '{printf "'$format'\n", $9, $2, $3, $4, $8, $1}'
        done
        sudo zfs list -H 2> /dev/null | \
            awk '{printf "'$format'\n", $5, $3, $2, "", "", $1}'
    else
        df -Hl | grep ^/ | \
            awk '{printf "'$format'\n", $6, $2, $3, $4, $5, $1}' 
    fi
}

# -----------------------------------------------------------------------------
# process management
# -----------------------------------------------------------------------------

if [[ $ME_OS == osx ]] ; then
    alias top='top -o cpu'
fi

alias htop='sudo htop --sort-key PERCENT_CPU'

plist() {
    pids=$(echo $(pgrep $1))
    [[ -z $pids ]] && return
    shift
    ps -p${pids} $*
}

# -----------------------------------------------------------------------------
# package management
# -----------------------------------------------------------------------------

case $ME_OS in
    bsd)
        alias pkg='sudo pkg'
        alias pcup='sudo pc-updatemanager'
        ;;
    linux)
        case $ME_DISTRO_FLAVOR in
            centos | redhat)
                alias yum='sudo yum'
                alias systemctl='sudo systemctl'
                ;;
            debian | ubuntu | neon)
                alias tude='sudo aptitude'
                alias apt='sudo apt'
                alias apt-get='sudo apt-get'
                alias apt-key='sudo apt-key'
                ;;
            fedora)
                alias dnf='sudo dnf'
                ;;
            gentoo)
                alias e='sudo -E emerge --verbose'
                alias eup='e -auDNv @world --with-bdeps=y'
                alias eclean='e -a --depclean'
                alias elog='sudo view /var/log/portage/elog/summary.log'
                ;;
            suse)
                alias zyp='sudo zypper'
                ;;
        esac
        ;;
    solaris)
        alias pkg='sudo pkg'
        alias pkgutil='sudo /opt/csw/bin/pkgutil'
        ;;
esac

# -----------------------------------------------------------------------------
# kernel management
# -----------------------------------------------------------------------------

case $ME_DISTRO_FLAVOR in
    debian | ubuntu)
        purge_kernel() {
            if [[ $# != 1 ]] ; then
                echo usage: $0 version >&2
                return 1
            fi
            version=$1
            sudo dpkg --purge linux-image-$version linux-image-extra-$version
            sudo dpkg --configure --pending
        }
        ;;
esac

# vim: ft=zsh et
