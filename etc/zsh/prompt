#!/usr/bin/env zsh


# =============================================================================
# zsh prompt
# =============================================================================

#
# -----------------------------------------------------------------------------
# NOTE:
#     functions et al are visible in the global namespace
#     prefix with "mep" to avoid potential collisions
# -----------------------------------------------------------------------------


# -----------------------------------------------------------------------------
# color and symbol conveniences
# -----------------------------------------------------------------------------

typeset -A mep_color
if [[ $TERM == xterm* ]] ; then
    mep_color[prompt]='%F{cyan}'    # prompt: non-message artifacts
    mep_color[info]='%F{green}'     # info: normal
    mep_color[warn]='%F{yellow}'    # warn: something bad, but not too much so
    mep_color[err]='%F{red}'        # err: something really bad
    mep_color[hl]='%F{cyan}'        # hl: highlight
fi

#typeset -A mep_uni              # unicode characters
#mep_uni[rightwards-arrow-with-hook]=$(echo "\u21aa")
#mep_uni[leftwards-arrow-with-hook]=$(echo "\u21a9")


# -----------------------------------------------------------------------------
# main prompt
# -----------------------------------------------------------------------------

## "incoming" message, displayed after command run
#mep-in() {
#    [[ $TERM == xterm* ]] && print "${mep_uni[rightwards-arrow-with-hook]}"
#}
#
## "outgoing" message, displayed before command run
#mep-out() {
#    [[ $TERM == xterm* ]] && print "${mep_uni[leftwards-arrow-with-hook]}"
#}
#
## prompt message, displayed before prompt sign
#mep-prompt-message() {
#    print "%(?,${mep_color[info]},${mep_color[warn]})$(mep-in)%f"
#}

# prompt sign, indicates user to enter next command
mep-prompt-sign() {
    print "${mep_color[prompt]}%c%f %#"
}

mep-date() {
    print "${mep_color[info]}%*%f"
}

## zsh hook invoked after command processed but before executed
## displays "outgoing" message
#preexec() {
#    print "$fg[green]$(mep-out)$reset_color"
#}

# zsh prompt variable
#PROMPT="$(mep-prompt-message) $(mep-prompt-sign) "
PROMPT="$(mep-date) $(mep-prompt-sign) "


# -----------------------------------------------------------------------------
# status prompt (right side)
# -----------------------------------------------------------------------------

# return code status (enabled if rc!=0)
mep-rc-status() {
    print "%(?,,${mep_color[warn]}[rc:%?]%f)"
}

# command history status
mep-history-status() {
    print "${mep_color[info]}[!]%f"
}

# job status (enabled if background jobs detected)
mep-job-status() {
    print "%(1j,${mep_color[info]}[j:%j]%f,)"
}

# virtualenv status (enabled if virtualenv detected)
mep-venv-status() {
    if [[ -n $VIRTUAL_ENV ]] ; then
        print "${mep_color[info]}[p:$(basename $VIRTUAL_ENV)]%f"
    fi
}

# git status: enabled if git repo detected
mep-git-status-text() {
    stat=$(git status 2> /dev/null | head -1)
    case $stat in
        "On branch"*)
            stat=$(echo $stat | cut -d' ' -f3)
            ;;
        "rebase in progress"*)
            stat="rebase"
            ;;
        *detached*)
            tag=$(echo $stat | awk '{print $4}')
            stat="$tag/T"
            ;;
    esac
    echo $stat
}

# git status: enabled if git repo detected
mep-git-status() {
    local git=$(mep-git-status-text)
    [[ -n $git ]] && print "${mep_color[info]}[g:${git}]%f"
}

# zsh right prompt variable

# toggle righthand prompt
unset RPROMPT
rprompt() {
    if [[ -z $RPROMPT ]] ; then
        #RPROMPT='$(mep-venv-status)$(mep-rc-status)$(mep-git-status)$(mep-job-status)$(mep-history-status)'
        RPROMPT='$(mep-venv-status)$(mep-rc-status)$(mep-git-status)$(mep-job-status)'
    else
        unset RPROMPT
    fi
}
# enable by default
rprompt

# -----------------------------------------------------------------------------
# misc
# -----------------------------------------------------------------------------

# set the titlebar of term
mep-title() {
    if [[ ! $TERM == xterm* ]] ; then
        return
    fi
    if [[ $ITERM_PROFILE == Task ]] ; then
        return
    fi
    # xterm-compatible terms
    local git=$(mep-git-status-text)
    [[ -n $git ]] && git=" [$git]"
    print -Pn "\e]0;"${XTITLE:-%n@%m}"\a"
}

# zsh hook invoked just before prompt displayed
# sets term title
precmd() {
    mep-title
}
