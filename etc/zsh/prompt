# =============================================================================
# shell prompt
# =============================================================================

typeset -A p_color
case $TERM in
  screen*|tmux*|xterm*)
    p_color[none]='%f'
    p_color[Green]='%F{002}'
    p_color[Grey23]='%F{237}'
    p_color[PaleTurquoise4]='%F{066}'
    p_color[RosyBrown]='%F{138}'
    p_color[Red]='%F{009}'
    ;;
esac

function p_c_info() {
  echo -n ${p_color[PaleTurquoise4]}
}

function p_c_ok() {
  echo -n ${p_color[Green]}
}

function p_c_error() {
  echo -n ${p_color[Red]}
}

function p_c_subtle() {
  echo -n ${p_color[Grey23]}
}

function p_c_reset() {
  echo -n ${p_color[none]}
}

function p_divider {
  p_c_subtle
  repeat $(tput cols) echo -n '.'
  p_c_reset
}

function p_prompt {
  echo -n '%(?,'$(p_c_ok)','$(p_c_error)')▶ '$(p_c_reset)
}

function p_path {
  p_c_info
  echo -n '%B%~%b'
  p_c_reset
}

function p_jobs {
  p_c_info
  echo -n '%(1j,[%j],)'
  p_c_reset
}

function p_vcs {
  local git_stat=$(git status 2> /dev/null | head -2)
  local git_blurb=
  case $git_stat in
    "On branch"*"unmerged"*)
      git_blurb="(merge)"
      ;;
    "On branch"*)
      branch=$(echo $git_stat | head -1 | cut -d' ' -f3)
      ahead=$(echo $git_stat | grep 'branch is ahead' | awk '{print $8}')
      [ -z "$ahead" ] && ahead=0
      behind=$(echo $git_stat | grep 'branch is behind' | awk '{print $7}')
      [ -z "$behind" ] && behind=0
      porcelain=$(git status --porcelain)
      added=$(echo $porcelain | grep '^A\|^M' | wc -l | tr -d ' ')
      modified=$(echo $porcelain | grep '^.M' | wc -l | tr -d ' ')
      unknown=$(echo $porcelain | grep '^??' | wc -l | tr -d ' ')
      git_blurb=${branch}':?'${unknown}'~'${modified}'+'${added}'⇡'${ahead}'⇣'${behind}
      ;;
    "rebase in progress"*)
      git_blurb="(rebase)"
      ;;
    *"detached"*)
      tag=$(echo $git_stat | head -1 | awk '{print $4}')
      git_blurb="$tag"
      ;;
  esac
  [ -z "$git_blurb" ] && git_blurb='[na]'
  p_c_info
  # echo -n ''${git_blurb}
  echo -n '[g:'${git_blurb}']'
  p_c_reset
}

function p_env {
  [ -z "$VIRTUAL_ENV" ] && return
  p_c_info
  echo -n '[p:'$(basename "$VIRTUAL_ENV")']'
  # echo -n '[p]'
  p_c_reset
}

PROMPT='
╭ $(p_vcs)$(p_env)$(p_jobs)
╰ $(p_prompt)'

#RPROMPT='$(p_vcs)$(p_env)$(p_jobs)'

# -----------------------------------------------------------------------------
# windows title
# -----------------------------------------------------------------------------

function precmd {
  [[ $TERM == xterm* ]] || return
  print -Pn '\e]0;'
  if [ -n "$SSH_CLIENT" ]; then
    print -Pn '[%m] '
  fi
  print -Pn '%~\a'
}

# vim: ft=zsh
